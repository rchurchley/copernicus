/*#######################
## Basic document info ##
#######################*/

$HugeGrid: 1040px;
$LargeGrid: 768px;
$MediumGrid: 576px;
$SmallGrid: 100%;

$VGutter: 12px;
$HGutter: 24px;

$HugeScreen: "(min-width: 1024px)";
$LargeScreen: "(min-width: 768px) and (max-width: 1023px)";
$MediumScreen: "(min-width: 576px) and (max-width: 767px)";
$ColumnatedScreen: "(min-width: 576px)";
$SmallScreen: "(max-width: 575px)";

$RetinaScreen: "(-webkit-min-device-pixel-ratio: 2), screen and (min-device-pixel-ratio: 2), screen and (min-resolution: 192dpi), screen and (min-resolution: 2dppx)";

body { /* used like a page wrapper */
	width: $SmallGrid;
	margin: 0 auto;
	
	@media screen and #{$MediumScreen} { width: $MediumGrid; }
	@media screen and #{$LargeScreen} {	width: $LargeGrid; }
	@media screen and #{$HugeScreen} {	width: $HugeGrid; }
}

/* sethorizontal //////////////////////////////////////////////////////////
// when screen gets big, set element as a column taking $GridFraction
// of the available space, including the border, padding, and gutters.
//
// Parameters:
//	$GridFraction 			(real number between 0 and 1)
//		width of element as a proportion of the available grid space
//	$LGutter, $RGutter		(integer)
//		treat element as a column with a left or right gutter
//	$LMargin, $RMargin		(real number)
//		add additional margins (in units of $HGutter). Intended
//		to give element-specific margins to (e.g.) <blockquote> and <ul>
//	$ExtraWidth					(width in px)
//		extra width in case we want (e.g.) borders to extend outside the box
//
// Notes:
// 	Gutters are removed when moving to percentage-based layout on small
//  screens.
//	We don't need to include padding or borders in the width calculation, 
//  since reset.css invokes box-sizing: border-box for all elements. 	
//////////////////////////////////////////////////////////////////////////*/

@mixin sethorizontal($GridFraction, $LGutter:0, $RGutter:0, $LMargin: 0, $RMargin: 0, $ExtraWidth: 0) {

	@media screen and #{$SmallScreen} {
		width: 100%;
		margin-left: $LMargin * $HGutter;
		margin-right: $RMargin * $HGutter;
	}

	@media screen and #{$ColumnatedScreen} {
		margin-left: ($LGutter + $LMargin) * $HGutter;
		margin-right: ($RGutter + $RMargin) * $HGutter;
	}

	@media screen and #{$MediumScreen} {
		width: $GridFraction * ($MediumGrid) - ($LGutter + $LMargin + $RGutter + $RMargin) * $HGutter + $ExtraWidth;
	}

	@media screen and #{$LargeScreen} {
		width: $GridFraction * ($LargeGrid) - ($LGutter + $LMargin + $RGutter + $RMargin) * $HGutter + $ExtraWidth;
	}

	@media screen and #{$HugeScreen} {
		width: $GridFraction * ($HugeGrid) - 2 * ($LGutter + $LMargin + $RGutter + $RMargin) * $HGutter + $ExtraWidth;
		margin-left: 2 * ($LGutter + $LMargin) * $HGutter;
		margin-right: 2 * ($RGutter + $RMargin) * $HGutter;
	}
}

/* toplevelgutters ///////////////////////////////////////////////////////
// Add gutters for top-level (e.g. <section>) elements when screen is small
//////////////////////////////////////////////////////////////////////////*/

@mixin toplevelgutters {
	@media screen and #{$SmallScreen} {
		margin-left: $HGutter;
		margin-right: $HGutter;
	}
}

/* nogutters ///////////////////////////////////////////////////////////////
// On small screens, coloured boxes should extend to the sides of the screen,
// but being contained in a <section> with gutters prevents this. We can't
// just set negative margins because the %-based width is still calculated 
// using the width of the parent. I'd like to switch box-sizing back to
// content-box and add borders the same colour as the background. But it's 
// not clear how to have border-colour inherit from background-colour. So 
// we'll fake it with pseudoelements.
//////////////////////////////////////////////////////////////////////////*/

@mixin nogutters {
	&:before, &:after {
		content:"";
		position: absolute;
		top: 0;
		height: 100%;
		width: $HGutter;
		background-color: inherit;
		border: inherit;
		display: block;
	}
	&:before{ left: -$HGutter; }
	&:after { right: -$HGutter; }
}

/* paddedbox //////////////////////////////////////////////////////////////
// Adds gutters to inside of a box, so text looks nice against background
//////////////////////////////////////////////////////////////////////////*/

@mixin paddedbox($TPadding: 1, $RPadding: 1, $BPadding: 1, $LPadding: 1, $HugeExpand: 2) {
	padding-top: $TPadding * $VGutter;
	padding-right: $RPadding * $HGutter;
	padding-bottom: $BPadding * $VGutter;
	padding-left: $LPadding * $HGutter;
	@media screen and #{$HugeScreen} {
		padding-right: $HugeExpand * $RPadding * $HGutter;
		padding-left: $HugeExpand * $LPadding * $HGutter;
	}
}

/*###############################
## ABSTRACT SECTION TEMPLATES  ##
###############################*/

/* fullcontent /////////////////////////////////////////////////////////////
// Content taking up the whole width, assigned to .postheader
//////////////////////////////////////////////////////////////////////////*/
@mixin fullcontent($ExtraLMargin: 0, $ExtraRMargin: 0, $ExtraWidth: 0) {
	@include sethorizontal(1, 1, 1, $ExtraLMargin, $ExtraRMargin, $ExtraWidth);
}

/* maincontent /////////////////////////////////////////////////////////////
// Content set in a large column, assigned to div.column
//////////////////////////////////////////////////////////////////////////*/
@mixin maincontent($ExtraLMargin: 0, $ExtraRMargin: 0, $ExtraWidth: 0) {
	@include sethorizontal(2/3, 1, 0, $ExtraLMargin, $ExtraRMargin, $ExtraWidth);
}

/* sidecontent /////////////////////////////////////////////////////////////
// Content set in a small column, assigned to div.margin
//////////////////////////////////////////////////////////////////////////*/
@mixin sidecontent($extra-left-margin: 0, $extra-right-margin: 0, $ExtraWidth: 0) {
	@include sethorizontal(1/3, 1, 1, $extra-left-margin, $extra-right-margin, $ExtraWidth);
}